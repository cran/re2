// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// re2_capturing_group_names
SEXP re2_capturing_group_names(SEXP pattern);
RcppExport SEXP _re2_re2_capturing_group_names(SEXP patternSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_capturing_group_names(pattern));
    return rcpp_result_gen;
END_RCPP
}
// re2_named_capturing_groups
SEXP re2_named_capturing_groups(SEXP pattern);
RcppExport SEXP _re2_re2_named_capturing_groups(SEXP patternSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_named_capturing_groups(pattern));
    return rcpp_result_gen;
END_RCPP
}
// re2_number_of_capturing_groups
IntegerVector re2_number_of_capturing_groups(SEXP pattern);
RcppExport SEXP _re2_re2_number_of_capturing_groups(SEXP patternSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_number_of_capturing_groups(pattern));
    return rcpp_result_gen;
END_RCPP
}
// re2_detect
LogicalVector re2_detect(StringVector string, SEXP pattern);
RcppExport SEXP _re2_re2_detect(SEXP stringSEXP, SEXP patternSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type string(stringSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_detect(string, pattern));
    return rcpp_result_gen;
END_RCPP
}
// re2_which
IntegerVector re2_which(StringVector string, SEXP pattern);
RcppExport SEXP _re2_re2_which(SEXP stringSEXP, SEXP patternSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type string(stringSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_which(string, pattern));
    return rcpp_result_gen;
END_RCPP
}
// re2_subset
StringVector re2_subset(StringVector string, SEXP pattern);
RcppExport SEXP _re2_re2_subset(SEXP stringSEXP, SEXP patternSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type string(stringSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_subset(string, pattern));
    return rcpp_result_gen;
END_RCPP
}
// re2_extract_replace
SEXP re2_extract_replace(StringVector string, SEXP pattern, std::string& rewrite);
RcppExport SEXP _re2_re2_extract_replace(SEXP stringSEXP, SEXP patternSEXP, SEXP rewriteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type string(stringSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< std::string& >::type rewrite(rewriteSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_extract_replace(string, pattern, rewrite));
    return rcpp_result_gen;
END_RCPP
}
// re2_extract_replace_cpp
SEXP re2_extract_replace_cpp(StringVector string, SEXP pattern, std::string& rewrite, bool logical);
RcppExport SEXP _re2_re2_extract_replace_cpp(SEXP stringSEXP, SEXP patternSEXP, SEXP rewriteSEXP, SEXP logicalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type string(stringSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< std::string& >::type rewrite(rewriteSEXP);
    Rcpp::traits::input_parameter< bool >::type logical(logicalSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_extract_replace_cpp(string, pattern, rewrite, logical));
    return rcpp_result_gen;
END_RCPP
}
// re2_get_options
List re2_get_options(SEXP re2ptr);
RcppExport SEXP _re2_re2_get_options(SEXP re2ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type re2ptr(re2ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_get_options(re2ptr));
    return rcpp_result_gen;
END_RCPP
}
// re2_locate
IntegerMatrix re2_locate(StringVector string, SEXP pattern);
RcppExport SEXP _re2_re2_locate(SEXP stringSEXP, SEXP patternSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type string(stringSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_locate(string, pattern));
    return rcpp_result_gen;
END_RCPP
}
// re2_locate_all
List re2_locate_all(StringVector string, SEXP pattern);
RcppExport SEXP _re2_re2_locate_all(SEXP stringSEXP, SEXP patternSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type string(stringSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_locate_all(string, pattern));
    return rcpp_result_gen;
END_RCPP
}
// re2_match
SEXP re2_match(StringVector string, SEXP pattern, bool simplify);
RcppExport SEXP _re2_re2_match(SEXP stringSEXP, SEXP patternSEXP, SEXP simplifySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type string(stringSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< bool >::type simplify(simplifySEXP);
    rcpp_result_gen = Rcpp::wrap(re2_match(string, pattern, simplify));
    return rcpp_result_gen;
END_RCPP
}
// re2_match_all
List re2_match_all(StringVector string, SEXP pattern);
RcppExport SEXP _re2_re2_match_all(SEXP stringSEXP, SEXP patternSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type string(stringSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_match_all(string, pattern));
    return rcpp_result_gen;
END_RCPP
}
// re2_count
IntegerVector re2_count(StringVector string, SEXP pattern);
RcppExport SEXP _re2_re2_count(SEXP stringSEXP, SEXP patternSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type string(stringSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_count(string, pattern));
    return rcpp_result_gen;
END_RCPP
}
// re2_match_cpp
SEXP re2_match_cpp(StringVector text, SEXP pattern, Nullable<List> more_options);
RcppExport SEXP _re2_re2_match_cpp(SEXP textSEXP, SEXP patternSEXP, SEXP more_optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type text(textSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type more_options(more_optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_match_cpp(text, pattern, more_options));
    return rcpp_result_gen;
END_RCPP
}
// re2_max_submatch
SEXP re2_max_submatch(StringVector rewrite);
RcppExport SEXP _re2_re2_max_submatch(SEXP rewriteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type rewrite(rewriteSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_max_submatch(rewrite));
    return rcpp_result_gen;
END_RCPP
}
// re2_check_rewrite_string
SEXP re2_check_rewrite_string(SEXP pattern, StringVector rewrite);
RcppExport SEXP _re2_re2_check_rewrite_string(SEXP patternSEXP, SEXP rewriteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< StringVector >::type rewrite(rewriteSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_check_rewrite_string(pattern, rewrite));
    return rcpp_result_gen;
END_RCPP
}
// re2_possible_match_range
SEXP re2_possible_match_range(SEXP pattern, int maxlen, bool logical);
RcppExport SEXP _re2_re2_possible_match_range(SEXP patternSEXP, SEXP maxlenSEXP, SEXP logicalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< int >::type maxlen(maxlenSEXP);
    Rcpp::traits::input_parameter< bool >::type logical(logicalSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_possible_match_range(pattern, maxlen, logical));
    return rcpp_result_gen;
END_RCPP
}
// re2_quote_meta
CharacterVector re2_quote_meta(CharacterVector unquoted);
RcppExport SEXP _re2_re2_quote_meta(SEXP unquotedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type unquoted(unquotedSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_quote_meta(unquoted));
    return rcpp_result_gen;
END_RCPP
}
// re2_regexp
XPtr<RE2> re2_regexp(std::string& pattern, Nullable<List> more_options);
RcppExport SEXP _re2_re2_regexp(SEXP patternSEXP, SEXP more_optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type more_options(more_optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_regexp(pattern, more_options));
    return rcpp_result_gen;
END_RCPP
}
// re2_replace
SEXP re2_replace(StringVector string, SEXP pattern, std::string& rewrite);
RcppExport SEXP _re2_re2_replace(SEXP stringSEXP, SEXP patternSEXP, SEXP rewriteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type string(stringSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< std::string& >::type rewrite(rewriteSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_replace(string, pattern, rewrite));
    return rcpp_result_gen;
END_RCPP
}
// re2_replace_cpp
SEXP re2_replace_cpp(StringVector string, SEXP pattern, std::string& rewrite, bool logical);
RcppExport SEXP _re2_re2_replace_cpp(SEXP stringSEXP, SEXP patternSEXP, SEXP rewriteSEXP, SEXP logicalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type string(stringSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< std::string& >::type rewrite(rewriteSEXP);
    Rcpp::traits::input_parameter< bool >::type logical(logicalSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_replace_cpp(string, pattern, rewrite, logical));
    return rcpp_result_gen;
END_RCPP
}
// re2_replace_all
SEXP re2_replace_all(StringVector string, SEXP pattern, std::string& rewrite);
RcppExport SEXP _re2_re2_replace_all(SEXP stringSEXP, SEXP patternSEXP, SEXP rewriteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type string(stringSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< std::string& >::type rewrite(rewriteSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_replace_all(string, pattern, rewrite));
    return rcpp_result_gen;
END_RCPP
}
// re2_replace_all_cpp
SEXP re2_replace_all_cpp(StringVector string, SEXP pattern, std::string& rewrite, bool count);
RcppExport SEXP _re2_re2_replace_all_cpp(SEXP stringSEXP, SEXP patternSEXP, SEXP rewriteSEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type string(stringSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< std::string& >::type rewrite(rewriteSEXP);
    Rcpp::traits::input_parameter< bool >::type count(countSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_replace_all_cpp(string, pattern, rewrite, count));
    return rcpp_result_gen;
END_RCPP
}
// re2_split
SEXP re2_split(StringVector string, SEXP pattern, bool simplify, double n);
RcppExport SEXP _re2_re2_split(SEXP stringSEXP, SEXP patternSEXP, SEXP simplifySEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type string(stringSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< bool >::type simplify(simplifySEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(re2_split(string, pattern, simplify, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_re2_re2_capturing_group_names", (DL_FUNC) &_re2_re2_capturing_group_names, 1},
    {"_re2_re2_named_capturing_groups", (DL_FUNC) &_re2_re2_named_capturing_groups, 1},
    {"_re2_re2_number_of_capturing_groups", (DL_FUNC) &_re2_re2_number_of_capturing_groups, 1},
    {"_re2_re2_detect", (DL_FUNC) &_re2_re2_detect, 2},
    {"_re2_re2_which", (DL_FUNC) &_re2_re2_which, 2},
    {"_re2_re2_subset", (DL_FUNC) &_re2_re2_subset, 2},
    {"_re2_re2_extract_replace", (DL_FUNC) &_re2_re2_extract_replace, 3},
    {"_re2_re2_extract_replace_cpp", (DL_FUNC) &_re2_re2_extract_replace_cpp, 4},
    {"_re2_re2_get_options", (DL_FUNC) &_re2_re2_get_options, 1},
    {"_re2_re2_locate", (DL_FUNC) &_re2_re2_locate, 2},
    {"_re2_re2_locate_all", (DL_FUNC) &_re2_re2_locate_all, 2},
    {"_re2_re2_match", (DL_FUNC) &_re2_re2_match, 3},
    {"_re2_re2_match_all", (DL_FUNC) &_re2_re2_match_all, 2},
    {"_re2_re2_count", (DL_FUNC) &_re2_re2_count, 2},
    {"_re2_re2_match_cpp", (DL_FUNC) &_re2_re2_match_cpp, 3},
    {"_re2_re2_max_submatch", (DL_FUNC) &_re2_re2_max_submatch, 1},
    {"_re2_re2_check_rewrite_string", (DL_FUNC) &_re2_re2_check_rewrite_string, 2},
    {"_re2_re2_possible_match_range", (DL_FUNC) &_re2_re2_possible_match_range, 3},
    {"_re2_re2_quote_meta", (DL_FUNC) &_re2_re2_quote_meta, 1},
    {"_re2_re2_regexp", (DL_FUNC) &_re2_re2_regexp, 2},
    {"_re2_re2_replace", (DL_FUNC) &_re2_re2_replace, 3},
    {"_re2_re2_replace_cpp", (DL_FUNC) &_re2_re2_replace_cpp, 4},
    {"_re2_re2_replace_all", (DL_FUNC) &_re2_re2_replace_all, 3},
    {"_re2_re2_replace_all_cpp", (DL_FUNC) &_re2_re2_replace_all_cpp, 4},
    {"_re2_re2_split", (DL_FUNC) &_re2_re2_split, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_re2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
